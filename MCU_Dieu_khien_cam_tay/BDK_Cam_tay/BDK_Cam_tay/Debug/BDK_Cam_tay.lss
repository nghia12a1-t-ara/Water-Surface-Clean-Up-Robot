
BDK_Cam_tay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800142  00800142  000005da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c6  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f3  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a9  00000000  00000000  000024b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000855  00000000  00000000  0000337a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003bcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 37       	cpi	r26, 0x70	; 112
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  9e:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IO_Init>:
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 63       	ori	r24, 0x3C	; 60
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8f 73       	andi	r24, 0x3F	; 63
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	5a 98       	cbi	0x0b, 2	; 11
  b4:	5c 98       	cbi	0x0b, 4	; 11
  b6:	5d 98       	cbi	0x0b, 5	; 11
  b8:	5b 9a       	sbi	0x0b, 3	; 11
  ba:	08 95       	ret

000000bc <ADC_Init>:
  bc:	17 b8       	out	0x07, r1	; 7
  be:	87 e8       	ldi	r24, 0x87	; 135
  c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  ca:	08 95       	ret

000000cc <ADC_Read>:
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	98 2b       	or	r25, r24
  d6:	90 83       	st	Z, r25
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_Read+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8a e1       	ldi	r24, 0x1A	; 26
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <ADC_Read+0x1e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <ADC_Read+0x24>
  f0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	98 2f       	mov	r25, r24
  fc:	88 27       	eor	r24, r24
  fe:	82 0f       	add	r24, r18
 100:	91 1d       	adc	r25, r1
 102:	08 95       	ret

00000104 <main>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	a0 97       	sbiw	r28, 0x20	; 32
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <IO_Init>
 11c:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_Init>
 120:	0e 94 85 01 	call	0x30a	; 0x30a <nRF24L01_Init>
 124:	0e 94 be 01 	call	0x37c	; 0x37c <SetTX_Mode>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_Read>
 12e:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <xAxis+0x1>
 132:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <xAxis>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_Read>
 13c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <yAxis+0x1>
 140:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <yAxis>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 144:	44 e0       	ldi	r20, 0x04	; 4
 146:	66 e4       	ldi	r22, 0x46	; 70
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <xAxis>
 14e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <xAxis+0x1>
 152:	0e 94 43 02 	call	0x486	; 0x486 <__itoa_ncheck>
 156:	44 e0       	ldi	r20, 0x04	; 4
 158:	62 e4       	ldi	r22, 0x42	; 66
 15a:	71 e0       	ldi	r23, 0x01	; 1
 15c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <yAxis>
 160:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <yAxis+0x1>
 164:	0e 94 43 02 	call	0x486	; 0x486 <__itoa_ncheck>
 168:	66 e4       	ldi	r22, 0x46	; 70
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	8a e4       	ldi	r24, 0x4A	; 74
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 3c 02 	call	0x478	; 0x478 <strcpy>
 174:	62 e4       	ldi	r22, 0x42	; 66
 176:	71 e0       	ldi	r23, 0x01	; 1
 178:	8a e4       	ldi	r24, 0x4A	; 74
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 3c 02 	call	0x478	; 0x478 <strcpy>
 180:	8a e4       	ldi	r24, 0x4A	; 74
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nRF24L01_TxPacket>
 188:	5e 99       	sbic	0x0b, 6	; 11
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <main+0xa6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x8c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x92>
 196:	00 00       	nop
 198:	5e 99       	sbic	0x0b, 6	; 11
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <main+0xa6>
 19c:	5d 9a       	sbi	0x0b, 5	; 11
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nRF24L01_TxPacket>
 1a6:	5e 9b       	sbis	0x0b, 6	; 11
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0xa2>
 1aa:	5f 99       	sbic	0x0b, 7	; 11
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <main+0xc8>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xae>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xb4>
 1b8:	00 00       	nop
 1ba:	5f 99       	sbic	0x0b, 7	; 11
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <main+0xc8>
 1be:	5d 98       	cbi	0x0b, 5	; 11
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nRF24L01_TxPacket>
 1c8:	5f 9b       	sbis	0x0b, 7	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0xc4>
 1cc:	0e 94 b3 01 	call	0x366	; 0x366 <SetRX_Mode>
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 04 02 	call	0x408	; 0x408 <RF_available>
 1d8:	89 2b       	or	r24, r25
 1da:	09 f4       	brne	.+2      	; 0x1de <main+0xda>
 1dc:	a3 cf       	rjmp	.-186    	; 0x124 <main+0x20>
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 c9 01 	call	0x392	; 0x392 <nRF24L01_RxPacket>
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	0e 94 1e 02 	call	0x43c	; 0x43c <atoi>
 1f0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <xRei+0x1>
 1f4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <xRei>
 1f8:	8b 37       	cpi	r24, 0x7B	; 123
 1fa:	91 05       	cpc	r25, r1
 1fc:	09 f4       	brne	.+2      	; 0x200 <main+0xfc>
 1fe:	5d 9a       	sbi	0x0b, 5	; 11
 200:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <xRei>
 204:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <xRei+0x1>
 208:	88 3c       	cpi	r24, 0xC8	; 200
 20a:	91 40       	sbci	r25, 0x01	; 1
 20c:	09 f0       	breq	.+2      	; 0x210 <main+0x10c>
 20e:	8a cf       	rjmp	.-236    	; 0x124 <main+0x20>
 210:	5c 9a       	sbi	0x0b, 4	; 11
 212:	88 cf       	rjmp	.-240    	; 0x124 <main+0x20>

00000214 <SPI_RW>:
 214:	98 e0       	ldi	r25, 0x08	; 8
 216:	88 23       	and	r24, r24
 218:	14 f4       	brge	.+4      	; 0x21e <SPI_RW+0xa>
 21a:	2b 9a       	sbi	0x05, 3	; 5
 21c:	01 c0       	rjmp	.+2      	; 0x220 <SPI_RW+0xc>
 21e:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	00 c0       	rjmp	.+0      	; 0x222 <SPI_RW+0xe>
 222:	00 c0       	rjmp	.+0      	; 0x224 <SPI_RW+0x10>
 224:	00 00       	nop
 226:	88 0f       	add	r24, r24
 228:	2d 9a       	sbi	0x05, 5	; 5
 22a:	00 c0       	rjmp	.+0      	; 0x22c <SPI_RW+0x18>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <SPI_RW+0x1a>
 22e:	00 00       	nop
 230:	84 60       	ori	r24, 0x04	; 4
 232:	2d 98       	cbi	0x05, 5	; 5
 234:	91 50       	subi	r25, 0x01	; 1
 236:	79 f7       	brne	.-34     	; 0x216 <SPI_RW+0x2>
 238:	08 95       	ret

0000023a <SPI_Read>:
 23a:	29 98       	cbi	0x05, 1	; 5
 23c:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 246:	29 9a       	sbi	0x05, 1	; 5
 248:	08 95       	ret

0000024a <SPI_RW_Reg>:
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	d6 2f       	mov	r29, r22
 250:	29 98       	cbi	0x05, 1	; 5
 252:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 256:	c8 2f       	mov	r28, r24
 258:	8d 2f       	mov	r24, r29
 25a:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 25e:	29 9a       	sbi	0x05, 1	; 5
 260:	8c 2f       	mov	r24, r28
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <SPI_Read_Buf>:
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	7b 01       	movw	r14, r22
 278:	14 2f       	mov	r17, r20
 27a:	29 98       	cbi	0x05, 1	; 5
 27c:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 280:	d8 2e       	mov	r13, r24
 282:	11 23       	and	r17, r17
 284:	79 f0       	breq	.+30     	; 0x2a4 <SPI_Read_Buf+0x3c>
 286:	e7 01       	movw	r28, r14
 288:	11 50       	subi	r17, 0x01	; 1
 28a:	01 2f       	mov	r16, r17
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	1f 4f       	sbci	r17, 0xFF	; 255
 292:	0e 0d       	add	r16, r14
 294:	1f 1d       	adc	r17, r15
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 29c:	89 93       	st	Y+, r24
 29e:	c0 17       	cp	r28, r16
 2a0:	d1 07       	cpc	r29, r17
 2a2:	c9 f7       	brne	.-14     	; 0x296 <SPI_Read_Buf+0x2e>
 2a4:	29 9a       	sbi	0x05, 1	; 5
 2a6:	8d 2d       	mov	r24, r13
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	08 95       	ret

000002b8 <SPI_Write_Buf>:
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	d6 2e       	mov	r13, r22
 2c8:	c7 2f       	mov	r28, r23
 2ca:	7a 01       	movw	r14, r20
 2cc:	29 98       	cbi	0x05, 1	; 5
 2ce:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 2d2:	d8 2f       	mov	r29, r24
 2d4:	e1 14       	cp	r14, r1
 2d6:	f1 04       	cpc	r15, r1
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <SPI_Write_Buf+0x3e>
 2da:	0d 2d       	mov	r16, r13
 2dc:	1c 2f       	mov	r17, r28
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	f8 01       	movw	r30, r16
 2e2:	81 91       	ld	r24, Z+
 2e4:	8f 01       	movw	r16, r30
 2e6:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 2ea:	cf 5f       	subi	r28, 0xFF	; 255
 2ec:	8c 2f       	mov	r24, r28
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	8e 15       	cp	r24, r14
 2f2:	9f 05       	cpc	r25, r15
 2f4:	a8 f3       	brcs	.-22     	; 0x2e0 <SPI_Write_Buf+0x28>
 2f6:	29 9a       	sbi	0x05, 1	; 5
 2f8:	8d 2f       	mov	r24, r29
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	08 95       	ret

0000030a <nRF24L01_Init>:
 30a:	81 e2       	ldi	r24, 0x21	; 33
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <nRF24L01_Init+0x2>
 310:	00 00       	nop
 312:	58 98       	cbi	0x0b, 0	; 11
 314:	29 9a       	sbi	0x05, 1	; 5
 316:	2d 98       	cbi	0x05, 5	; 5
 318:	45 e0       	ldi	r20, 0x05	; 5
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	6d e3       	ldi	r22, 0x3D	; 61
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_Write_Buf>
 326:	45 e0       	ldi	r20, 0x05	; 5
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	68 e3       	ldi	r22, 0x38	; 56
 32c:	71 e0       	ldi	r23, 0x01	; 1
 32e:	8a e2       	ldi	r24, 0x2A	; 42
 330:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_Write_Buf>
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	81 e2       	ldi	r24, 0x21	; 33
 338:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	82 e2       	ldi	r24, 0x22	; 34
 340:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	85 e2       	ldi	r24, 0x25	; 37
 348:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 34c:	60 e2       	ldi	r22, 0x20	; 32
 34e:	81 e3       	ldi	r24, 0x31	; 49
 350:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	86 e2       	ldi	r24, 0x26	; 38
 358:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 35c:	6e e0       	ldi	r22, 0x0E	; 14
 35e:	80 e2       	ldi	r24, 0x20	; 32
 360:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 364:	08 95       	ret

00000366 <SetRX_Mode>:
 366:	28 98       	cbi	0x05, 0	; 5
 368:	6f e0       	ldi	r22, 0x0F	; 15
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 370:	28 9a       	sbi	0x05, 0	; 5
 372:	8b e2       	ldi	r24, 0x2B	; 43
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <SetRX_Mode+0xe>
 378:	00 00       	nop
 37a:	08 95       	ret

0000037c <SetTX_Mode>:
 37c:	28 98       	cbi	0x05, 0	; 5
 37e:	6e e0       	ldi	r22, 0x0E	; 14
 380:	80 e2       	ldi	r24, 0x20	; 32
 382:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 386:	28 9a       	sbi	0x05, 0	; 5
 388:	8b e2       	ldi	r24, 0x2B	; 43
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <SetTX_Mode+0xe>
 38e:	00 00       	nop
 390:	08 95       	ret

00000392 <nRF24L01_RxPacket>:
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	8c 01       	movw	r16, r24
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	0e 94 1d 01 	call	0x23a	; 0x23a <SPI_Read>
 3a2:	c8 2f       	mov	r28, r24
 3a4:	86 ff       	sbrs	r24, 6
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <nRF24L01_RxPacket+0x26>
 3a8:	28 98       	cbi	0x05, 0	; 5
 3aa:	40 e2       	ldi	r20, 0x20	; 32
 3ac:	b8 01       	movw	r22, r16
 3ae:	81 e6       	ldi	r24, 0x61	; 97
 3b0:	0e 94 34 01 	call	0x268	; 0x268 <SPI_Read_Buf>
 3b4:	d1 e0       	ldi	r29, 0x01	; 1
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <nRF24L01_RxPacket+0x28>
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	6c 2f       	mov	r22, r28
 3bc:	87 e2       	ldi	r24, 0x27	; 39
 3be:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 3c2:	8d 2f       	mov	r24, r29
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <nRF24L01_TxPacket>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
 3d4:	28 98       	cbi	0x05, 0	; 5
 3d6:	45 e0       	ldi	r20, 0x05	; 5
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	6d e3       	ldi	r22, 0x3D	; 61
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	8a e2       	ldi	r24, 0x2A	; 42
 3e0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_Write_Buf>
 3e4:	40 e2       	ldi	r20, 0x20	; 32
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	be 01       	movw	r22, r28
 3ea:	80 ea       	ldi	r24, 0xA0	; 160
 3ec:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_Write_Buf>
 3f0:	6e e0       	ldi	r22, 0x0E	; 14
 3f2:	80 e2       	ldi	r24, 0x20	; 32
 3f4:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_RW_Reg>
 3f8:	28 9a       	sbi	0x05, 0	; 5
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <get_status>:
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_RW>
 406:	08 95       	ret

00000408 <RF_available>:
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
 40e:	87 e1       	ldi	r24, 0x17	; 23
 410:	0e 94 1d 01 	call	0x23a	; 0x23a <SPI_Read>
 414:	84 fd       	sbrc	r24, 4
 416:	0a c0       	rjmp	.+20     	; 0x42c <RF_available+0x24>
 418:	20 97       	sbiw	r28, 0x00	; 0
 41a:	59 f0       	breq	.+22     	; 0x432 <RF_available+0x2a>
 41c:	0e 94 00 02 	call	0x400	; 0x400 <get_status>
 420:	86 95       	lsr	r24
 422:	87 70       	andi	r24, 0x07	; 7
 424:	88 83       	st	Y, r24
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	05 c0       	rjmp	.+10     	; 0x436 <RF_available+0x2e>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <RF_available+0x2e>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <atoi>:
 43c:	fc 01       	movw	r30, r24
 43e:	88 27       	eor	r24, r24
 440:	99 27       	eor	r25, r25
 442:	e8 94       	clt
 444:	21 91       	ld	r18, Z+
 446:	20 32       	cpi	r18, 0x20	; 32
 448:	e9 f3       	breq	.-6      	; 0x444 <atoi+0x8>
 44a:	29 30       	cpi	r18, 0x09	; 9
 44c:	10 f0       	brcs	.+4      	; 0x452 <atoi+0x16>
 44e:	2e 30       	cpi	r18, 0x0E	; 14
 450:	c8 f3       	brcs	.-14     	; 0x444 <atoi+0x8>
 452:	2b 32       	cpi	r18, 0x2B	; 43
 454:	41 f0       	breq	.+16     	; 0x466 <atoi+0x2a>
 456:	2d 32       	cpi	r18, 0x2D	; 45
 458:	39 f4       	brne	.+14     	; 0x468 <atoi+0x2c>
 45a:	68 94       	set
 45c:	04 c0       	rjmp	.+8      	; 0x466 <atoi+0x2a>
 45e:	0e 94 4e 02 	call	0x49c	; 0x49c <__mulhi_const_10>
 462:	82 0f       	add	r24, r18
 464:	91 1d       	adc	r25, r1
 466:	21 91       	ld	r18, Z+
 468:	20 53       	subi	r18, 0x30	; 48
 46a:	2a 30       	cpi	r18, 0x0A	; 10
 46c:	c0 f3       	brcs	.-16     	; 0x45e <atoi+0x22>
 46e:	1e f4       	brtc	.+6      	; 0x476 <atoi+0x3a>
 470:	90 95       	com	r25
 472:	81 95       	neg	r24
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <strcpy>:
 478:	fb 01       	movw	r30, r22
 47a:	dc 01       	movw	r26, r24
 47c:	01 90       	ld	r0, Z+
 47e:	0d 92       	st	X+, r0
 480:	00 20       	and	r0, r0
 482:	e1 f7       	brne	.-8      	; 0x47c <strcpy+0x4>
 484:	08 95       	ret

00000486 <__itoa_ncheck>:
 486:	bb 27       	eor	r27, r27
 488:	4a 30       	cpi	r20, 0x0A	; 10
 48a:	31 f4       	brne	.+12     	; 0x498 <__itoa_ncheck+0x12>
 48c:	99 23       	and	r25, r25
 48e:	22 f4       	brpl	.+8      	; 0x498 <__itoa_ncheck+0x12>
 490:	bd e2       	ldi	r27, 0x2D	; 45
 492:	90 95       	com	r25
 494:	81 95       	neg	r24
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__utoa_common>

0000049c <__mulhi_const_10>:
 49c:	7a e0       	ldi	r23, 0x0A	; 10
 49e:	97 9f       	mul	r25, r23
 4a0:	90 2d       	mov	r25, r0
 4a2:	87 9f       	mul	r24, r23
 4a4:	80 2d       	mov	r24, r0
 4a6:	91 0d       	add	r25, r1
 4a8:	11 24       	eor	r1, r1
 4aa:	08 95       	ret

000004ac <__utoa_ncheck>:
 4ac:	bb 27       	eor	r27, r27

000004ae <__utoa_common>:
 4ae:	fb 01       	movw	r30, r22
 4b0:	55 27       	eor	r21, r21
 4b2:	aa 27       	eor	r26, r26
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	aa 1f       	adc	r26, r26
 4ba:	a4 17       	cp	r26, r20
 4bc:	10 f0       	brcs	.+4      	; 0x4c2 <__utoa_common+0x14>
 4be:	a4 1b       	sub	r26, r20
 4c0:	83 95       	inc	r24
 4c2:	50 51       	subi	r21, 0x10	; 16
 4c4:	b9 f7       	brne	.-18     	; 0x4b4 <__utoa_common+0x6>
 4c6:	a0 5d       	subi	r26, 0xD0	; 208
 4c8:	aa 33       	cpi	r26, 0x3A	; 58
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__utoa_common+0x20>
 4cc:	a9 5d       	subi	r26, 0xD9	; 217
 4ce:	a1 93       	st	Z+, r26
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	79 f7       	brne	.-34     	; 0x4b2 <__utoa_common+0x4>
 4d4:	b1 11       	cpse	r27, r1
 4d6:	b1 93       	st	Z+, r27
 4d8:	11 92       	st	Z+, r1
 4da:	cb 01       	movw	r24, r22
 4dc:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <strrev>

000004e0 <strrev>:
 4e0:	dc 01       	movw	r26, r24
 4e2:	fc 01       	movw	r30, r24
 4e4:	67 2f       	mov	r22, r23
 4e6:	71 91       	ld	r23, Z+
 4e8:	77 23       	and	r23, r23
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <strrev+0x4>
 4ec:	32 97       	sbiw	r30, 0x02	; 2
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <strrev+0x18>
 4f0:	7c 91       	ld	r23, X
 4f2:	6d 93       	st	X+, r22
 4f4:	70 83       	st	Z, r23
 4f6:	62 91       	ld	r22, -Z
 4f8:	ae 17       	cp	r26, r30
 4fa:	bf 07       	cpc	r27, r31
 4fc:	c8 f3       	brcs	.-14     	; 0x4f0 <strrev+0x10>
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
