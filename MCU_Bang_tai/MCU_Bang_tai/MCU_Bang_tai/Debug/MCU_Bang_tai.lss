
MCU_Bang_tai.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a37  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000434  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  9e:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IO_Init>:
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	88 68       	ori	r24, 0x88	; 136
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	5a 98       	cbi	0x0b, 2	; 11
  b4:	08 95       	ret

000000b6 <UART_Init>:
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 61       	ori	r24, 0x18	; 24
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <UART_getc>:
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <UART_getc+0x4>
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d8:	08 95       	ret

000000da <main>:
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <IO_Init>
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	95 e2       	ldi	r25, 0x25	; 37
  e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_Init>
  e6:	c1 e0       	ldi	r28, 0x01	; 1
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	0e 94 65 00 	call	0xca	; 0xca <UART_getc>
  ee:	81 33       	cpi	r24, 0x31	; 49
  f0:	29 f4       	brne	.+10     	; 0xfc <main+0x22>
  f2:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
  f6:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
  fa:	f7 cf       	rjmp	.-18     	; 0xea <main+0x10>
  fc:	82 33       	cpi	r24, 0x32	; 50
  fe:	a9 f7       	brne	.-22     	; 0xea <main+0x10>
 100:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 104:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 108:	f0 cf       	rjmp	.-32     	; 0xea <main+0x10>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
